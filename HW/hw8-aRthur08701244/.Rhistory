print("ABCA")
else
print(NA)
}
}
##### 請勿更動下方程式碼 #####
idioms <- c("念茲在茲", "騰雲駕霧", "清清白白", "一五一十", "防不勝防")
classify(idioms)
# Should print out:
#> [1] "ABCB" NA   "AABB" "ABAC" "ABCA"
# Write your code here
library(dplyr)
a <- str_match(idiom,"(\\w)(\\w)(\\w)(\\w)")
b <- as.data.frame(a)
colnames(b) <- c("idiom", "first", "second", "third", "fourth")
mutate(b, class = classify(b[,idiom]))
# Write your code here
library(dplyr)
a <- str_match(idiom,"(\\w)(\\w)(\\w)(\\w)")
b <- as.data.frame(a)
colnames(b) <- c("idiom", "first", "second", "third", "fourth")
for(i in seq_along(b)){
mutate(b, class = classify(b[i,idiom]))
}
for(i in seq_along(b)){
class[i] <- classify(b[i,idiom])
}
for(i in seq_along(b)){
class[i] <- classify(b[i,"idiom"])
}
idiom
for(i in seq_along(b)){
class[i] <- classify(idiom[i])
}
idiom
classify(蹀躞不下)
classify(idioms)
classify("蹀躞不下")
b
for(i in seq_along(idiom)){
class[i] <- classify(idiom[i])
}
k <-c(1)
for(i in seq_along(idiom)){
k <- classify(idiom[i])
}
# Write your code here
library(dplyr)
a <- str_match(idiom,"(\\w)(\\w)(\\w)(\\w)")
b <- as.data.frame(a)
colnames(b) <- c("idiom", "first", "second", "third", "fourth")
k <-c()
for(i in seq_along(idiom)){
k <- classify(idiom[i])
}
# Write your code here
library(dplyr)
a <- str_match(idiom,"(\\w)(\\w)(\\w)(\\w)")
b <- as.data.frame(a)
colnames(b) <- c("idiom", "first", "second", "third", "fourth")
k <-c()
for(i in seq_along(idiom)){
k <- classify(idiom[i])
}
knitr::opts_chunk$set(echo = TRUE,comment = '#>',error=TRUE, results = 'hold', out.width='70%', fig.align = 'center', message = FALSE)
library(dplyr)
library(stringr)
idioms <- c("顛三倒四", "翻來覆去", "沸沸揚揚")
# 請勿更動上方程式碼
# Write your code here
a <- str_match(idioms,"(\\w)(\\w)(\\w)(\\w)")
for (i in 2:5) {
str_replace(idioms, "a[i,3]","a[i,5]" )
}
# Should print out
#> [1] "倒四顛三" "覆去翻來" "揚揚沸沸"
# Write your code here
library(readr)
some <- read_delim("idioms.txt", delim = "\t", col_names = F)
someo <- as.vector(unlist(some))
somen <- someo[str_detect(someo, "【....】")]
somee <- str_replace(somen, "【","")
idiom <- str_replace(somee, "】","")
##### 請勿更動下方程式碼 #####
head(idiom)
length(idiom)
sum(is.na(idiom))
# Should print out:
#> [1] "澡身浴德" "枕麹藉糟" "正本清源" "認雞作鳳" "擊轂摩肩" "鳥覆危巢"
#> [1] 9697
#> [1] 0
classify <- function(idiom) {
# Write your code here
a <- str_match(idiom,"(\\w)(\\w)(\\w)(\\w)")
for (i in seq_along(idiom)) {
if(a[i,2] == a[i,3] & a[i,4] == a[i,5])
print("AABB")
else if(a[i,2] == a[i,4] & a[i,3] != a[i,5])
print("ABAC")
else if(a[i,2] != a[i,4] & a[i,3] == a[i,5])
print("ABCB")
else if(a[i,2] == a[i,5] & a[i,3] != a[i,4])
print("ABCA")
else
print(NA)
}
}
##### 請勿更動下方程式碼 #####
idioms <- c("念茲在茲", "騰雲駕霧", "清清白白", "一五一十", "防不勝防")
classify(idioms)
# Should print out:
#> [1] "ABCB" NA   "AABB" "ABAC" "ABCA"
library(dplyr)
a <- str_match(idiom,"(\\w)(\\w)(\\w)(\\w)")
b <- as.data.frame(a)
colnames(b) <- c("idiom", "first", "second", "third", "fourth")
classify(idiom)
b
a
idiom
# Write your code here
library(dplyr)
a <- str_match(idiom,"(\\w)(\\w)(\\w)(\\w)")
b <- as.data.frame(a)
colnames(b) <- c("idiom", "first", "second", "third", "fourth")
mutate(b, "class" = classify(idiom))
# Write your code here
library(dplyr)
a <- str_match(idiom,"(\\w)(\\w)(\\w)(\\w)")
b <- as.data.frame(a)
colnames(b) <- c("idiom", "first", "second", "third", "fourth")
mutate(b, class = classify(idiom))
# Write your code here
library(readr)
some <- read_delim("idioms.txt", delim = "\t", col_names = F)
someo <- as.vector(unlist(some))
somen <- someo[str_detect(someo, "【....】")]
somee <- str_replace(somen, "【","")
idiom <- str_replace(somee, "】","")
idiom <- na.rm(idiom)
# Write your code here
library(readr)
some <- read_delim("idioms.txt", delim = "\t", col_names = F)
someo <- as.vector(unlist(some))
somen <- someo[str_detect(someo, "【....】")]
somee <- str_replace(somen, "【","")
idiom2 <- str_replace(somee, "】","")
idiom <- na.omit(idiom2)
##### 請勿更動下方程式碼 #####
head(idiom)
length(idiom)
sum(is.na(idiom))
# Should print out:
#> [1] "澡身浴德" "枕麹藉糟" "正本清源" "認雞作鳳" "擊轂摩肩" "鳥覆危巢"
#> [1] 9697
#> [1] 0
classify(idiom)
a <- str_match(idiom,"(\\w)(\\w)(\\w)(\\w)")
b <- as.data.frame(a, na.omit(a))
b
a <- str_match(idiom,"(\\w)(\\w)(\\w)(\\w)")
b <- as_tibble(a)
a <- str_match(idiom,"(\\w)(\\w)(\\w)(\\w)")
b <- as.data.frame(a)
a <- str_match(idiom,"(\\w)(\\w)(\\w)(\\w)")
b <- as.data.frame(a)
colnames(b) <- c("idiom", "first", "second", "third", "fourth")
b <- as_tibble(b)
b
# Write your code here
library(dplyr)
a <- str_match(idiom,"(\\w)(\\w)(\\w)(\\w)")
b <- as.data.frame(a)
colnames(b) <- c("idiom", "first", "second", "third", "fourth")
b <- as_tibble(b)
mutate(b, class = classify(idiom))
# Write your code here
library(dplyr)
a <- str_match(idiom,"(\\w)(\\w)(\\w)(\\w)")
b <- as.data.frame(a)
colnames(b) <- c("idiom", "first", "second", "third", "fourth")
b <- as_tibble(b)
mutate(b, class = classify(idiom))
# Write your code here
library(dplyr)
a <- str_match(idiom,"(\\w)(\\w)(\\w)(\\w)")
b <- as.data.frame(a)
remove(b, row = 147)
?remove
is.na(b)
remove(b, is.na(b))
select(b, !is.na(b[,2]))
filter(b, !is.na(b))
filter(b, -147)
b
colnames(b) <- c("idiom", "first", "second", "third", "fourth")
b
b <- as_tibble(b)
b
# Write your code here
library(dplyr)
a <- str_match(idiom,"(\\w)(\\w)(\\w)(\\w)")
b <- as.data.frame(a)
colnames(b) <- c("idiom", "first", "second", "third", "fourth")
b <- as_tibble(b)
filter(b, first!= NA )
mutate(b, class = classify(idiom))
B
b
filter(b, first!= NA )
b
b[147,]
# Write your code here
library(ggplot2)
df2 <- filter(df, class == "ABAC")
df
df
b <- as_tibble(b)
b
df <- b
df
b <- as_tibble(b)
b <- na.omit(b)
b
b[147,]
# Write your code here
library(dplyr)
a <- str_match(idiom,"(\\w)(\\w)(\\w)(\\w)")
b <- as.data.frame(a)
colnames(b) <- c("idiom", "first", "second", "third", "fourth")
b <- as_tibble(b)
b <- na.omit(b)
mutate(b, class = classify(idiom))
# Write your code here
library(ggplot2)
df2 <- filter(df, class == "ABAC")
df
str <- c("cat", "bed", "car", "Mr.")
str[T,F]
str(T,F)
str[T,F,T,F]
a <- c(T,F,T,F)
str(a)
str[a]
str[c(T,F,T,F)]
knitr::opts_chunk$set(echo = TRUE,comment = '#>',error=TRUE, results = 'hold', out.width='70%', fig.align = 'center', message = FALSE)
library(dplyr)
library(stringr)
idioms <- c("顛三倒四", "翻來覆去", "沸沸揚揚")
# 請勿更動上方程式碼
# Write your code here
a <- str_match(idioms,"(\\w)(\\w)(\\w)(\\w)")
for (i in 2:5) {
str_replace(idioms, "a[i,3]","a[i,5]" )
}
# Should print out
#> [1] "倒四顛三" "覆去翻來" "揚揚沸沸"
library(stringr)
idioms <- c("顛三倒四", "翻來覆去", "沸沸揚揚")
# 請勿更動上方程式碼
# Write your code here
#a <- str_match(idioms,"(\\w)(\\w)(\\w)(\\w)")
#for (i in 2:5) {
#str_replace(idioms, "a[i,3]","a[i,5]" )
#}
str_replace(idioms, "(\\w{2})(\\w{2})", "\\2\\1")
# Should print out
#> [1] "倒四顛三" "覆去翻來" "揚揚沸沸"
a <- str_match(idioms,"(\\w)(\\w)(\\w)(\\w)")
a
a[2,2]
str_replace(idioms, "a[2,3]","a[2,5]" )
str_replace(idioms, a[2,3],a[2,5] )
a <- str_match(idioms,"(\\w)(\\w)(\\w)(\\w)")
for (i in 2:5) {
str_replace(idioms, "a[i,3]","a[i,5]" )
}
for (i in 2:5) {
str_replace(idioms, a[i,3],a[i,5] )
}
for (i in 2:3) {
str_replace(idioms, a[i,3],a[i,5] )
}
a
for (i in 1:3) {
str_replace(idioms, a[i,2],a[i,4] ) str_replace(idioms, a[i,3],a[i,5])
}
for (i in 1:3) {
str_replace(idioms, "a[i,3]","a[i,5]" )
}
b<- for (i in 1:3) {
str_replace(idioms, "a[i,3]","a[i,5]" )
}
b
a
b<- for (i in 1:3) {
str_replace(idioms, a[i,3],a[i,5] )
}
b
str_replace(idioms, a[1,3],a[1,5] )
?readLines
a1 <- read.delim("idioms.txt")
setwd("C:/Users/kmes8/Desktop/GitHub/hw8-aRthur08701244")
a1 <- read.delim("idioms.txt")
a1 <- read.delim("idioms.txt", col.names = F)
a1
a1 <- read.delim("idioms.txt", delim = "\t",col.names = F)
a1 <- read_delim("idioms.txt", delim = "\t",col.names = F)
library(readr)
a1 <- read_delim("idioms.txt")
a1 <- read_delim("idioms.txt", delim = "\t")
a1 <- read_delim("idioms.txt", delim = "\t", col_names = F)
a1
idiom <- readLines('idioms.txt', encoding = "UTF-8") %>%
#str_match('【(\\w{4})】') %>%
str_match('【(\\S{4})】') %>%
.[, 2] %>%  # Extract the first matched group
na.omit()   # remove NA
idiom
head(idiom)
length(idiom)
sum(is.na(idiom))
k <- readLines("idioms.txt", encoding = "UTF-8")
K
k
str_match(k, "【\\w{4}】")
q <- str_match(k, "【\\w{4}】")
q[1,1]
q[1,2]
?.
# Write your code here
#library(readr)
#some <- read_delim("idioms.txt", delim = "\t", col_names = F)
#someo <- as.vector(unlist(some))
#somen <- someo[str_detect(someo, "【....】")]
#somee <- str_replace(somen, "【","")
#idiom <- str_replace(somee, "】","")
library(dplyr)
library(stringr)
idiom <- readLines('idioms.txt', encoding = "UTF-8") %>%
#str_match('【(\\w{4})】') %>%
str_match('【(\\S{4})】') %>%
.[, 2] %>%  # Extract the first matched group
na.omit()   # remove NA
##### 請勿更動下方程式碼 #####
head(idiom)
length(idiom)
sum(is.na(idiom))
# Should print out:
#> [1] "澡身浴德" "枕麹藉糟" "正本清源" "認雞作鳳" "擊轂摩肩" "鳥覆危巢"
#> [1] 9697
#> [1] 0
str_match()
?str_match
idiom
?rep
# Write your code here
library(ggplot2)
df2 <- filter(df, class == "ABAC")
ggplot(df2)+
geom_bar(aes(first()))
# 請務必印出圖片
df
# Write your code here
#library(dplyr)
#    a <- str_match(idiom,"(\\w)(\\w)(\\w)(\\w)")
#   b <- as.data.frame(a)
#  colnames(b) <- c("idiom", "first", "second", "third", "fourth")
# b <- as_tibble(b)
#b <- na.omit(b)
#mutate(b, class = classify(idiom))
#df <- b
df <- tibble(idiom = idiom) %>%
mutate(class = classify(idiom)) %>%
mutate(first = str_replace(idiom, '(.)(.)(.)(.)', '\\1')) %>%
mutate(second = str_replace(idiom, '(.)(.)(.)(.)', '\\2')) %>%
mutate(third = str_replace(idiom, '(.)(.)(.)(.)', '\\3')) %>%
mutate(fourth = str_replace(idiom, '(.)(.)(.)(.)', '\\4'))
##### 請勿更動下方程式碼 #####
df %>% filter(class == "ABCA") %>% arrange(desc(idiom)) %>% head(8)
# Should print out:
#> # A tibble: 8 x 6
#>   idiom    class first second third fourth
#>   <chr>    <chr> <chr> <chr>  <chr> <chr>
#> 1 防不勝防 ABCA  防    不     勝    防
#> 2 訛以傳訛 ABCA  訛    以     傳    訛
#> 3 親上成親 ABCA  親    上     成    親
#> 4 衣錦褧衣 ABCA  衣    錦     褧    衣
#> 5 聞所未聞 ABCA  聞    所     未    聞
#> 6 美益求美 ABCA  美    益     求    美
#> 7 精益求精 ABCA  精    益     求    精
#> 8 節中長節 ABCA  節    中     長    節
df
classify <- function(idiom) {
# Write your code here
#a <- str_match(idiom,"(\\w)(\\w)(\\w)(\\w)")
#for (i in seq_along(idiom)) {
#if(a[i,2] == a[i,3] & a[i,4] == a[i,5])
#print("AABB")
#else if(a[i,2] == a[i,4] & a[i,3] != a[i,5])
#      print("ABAC")
#else if(a[i,2] != a[i,4] & a[i,3] == a[i,5])
#        print("ABCB")
#else if(a[i,2] == a[i,5] & a[i,3] != a[i,4])
#        print("ABCA")
#else
# print(NA)
#}
#}
classify <- function(idiom) {
# Write your code here
class <- rep(NA, length(idiom))
AABB <- str_detect(idiom, '(.)\\1(.)\\2')
ABAC <- str_detect(idiom, '(.).\\1.')
ABCB <- str_detect(idiom, '.(.).\\1')
ABCA <- str_detect(idiom, '(.)..\\1')
class[AABB] <- 'AABB'
class[ABAC] <- 'ABAC'
class[ABCB] <- 'ABCB'
class[ABCA] <- 'ABCA'
return(class)
}
##### 請勿更動下方程式碼 #####
idioms <- c("念茲在茲", "騰雲駕霧", "清清白白", "一五一十", "防不勝防")
classify(idioms)
# Should print out:
#> [1] "ABCB" NA   "AABB" "ABAC" "ABCA"
#classify <- function(idiom) {
# Write your code here
#a <- str_match(idiom,"(\\w)(\\w)(\\w)(\\w)")
#for (i in seq_along(idiom)) {
#if(a[i,2] == a[i,3] & a[i,4] == a[i,5])
#print("AABB")
#else if(a[i,2] == a[i,4] & a[i,3] != a[i,5])
#      print("ABAC")
#else if(a[i,2] != a[i,4] & a[i,3] == a[i,5])
#        print("ABCB")
#else if(a[i,2] == a[i,5] & a[i,3] != a[i,4])
#        print("ABCA")
#else
# print(NA)
#}
#}
classify <- function(idiom) {
# Write your code here
class <- rep(NA, length(idiom))
AABB <- str_detect(idiom, '(.)\\1(.)\\2')
ABAC <- str_detect(idiom, '(.).\\1.')
ABCB <- str_detect(idiom, '.(.).\\1')
ABCA <- str_detect(idiom, '(.)..\\1')
class[AABB] <- 'AABB'
class[ABAC] <- 'ABAC'
class[ABCB] <- 'ABCB'
class[ABCA] <- 'ABCA'
return(class)
}
##### 請勿更動下方程式碼 #####
idioms <- c("念茲在茲", "騰雲駕霧", "清清白白", "一五一十", "防不勝防")
classify(idioms)
# Should print out:
#> [1] "ABCB" NA   "AABB" "ABAC" "ABCA"
# Write your code here
#library(dplyr)
#    a <- str_match(idiom,"(\\w)(\\w)(\\w)(\\w)")
#   b <- as.data.frame(a)
#  colnames(b) <- c("idiom", "first", "second", "third", "fourth")
# b <- as_tibble(b)
#b <- na.omit(b)
#mutate(b, class = classify(idiom))
#df <- b
df <- tibble(idiom = idiom) %>%
mutate(class = classify(idiom)) %>%
mutate(first = str_replace(idiom, '(.)(.)(.)(.)', '\\1')) %>%
mutate(second = str_replace(idiom, '(.)(.)(.)(.)', '\\2')) %>%
mutate(third = str_replace(idiom, '(.)(.)(.)(.)', '\\3')) %>%
mutate(fourth = str_replace(idiom, '(.)(.)(.)(.)', '\\4'))
##### 請勿更動下方程式碼 #####
df %>% filter(class == "ABCA") %>% arrange(desc(idiom)) %>% head(8)
# Should print out:
#> # A tibble: 8 x 6
#>   idiom    class first second third fourth
#>   <chr>    <chr> <chr> <chr>  <chr> <chr>
#> 1 防不勝防 ABCA  防    不     勝    防
#> 2 訛以傳訛 ABCA  訛    以     傳    訛
#> 3 親上成親 ABCA  親    上     成    親
#> 4 衣錦褧衣 ABCA  衣    錦     褧    衣
#> 5 聞所未聞 ABCA  聞    所     未    聞
#> 6 美益求美 ABCA  美    益     求    美
#> 7 精益求精 ABCA  精    益     求    精
#> 8 節中長節 ABCA  節    中     長    節
df
# Write your code here
#    library(ggplot2)
#   df2 <- filter(df, class == "ABAC")
#  ggplot(df2)+
#   geom_bar(aes(first()))
library(ggplot2)
df %>%
filter(class == "ABAC") %>%
group_by(first) %>%
summarise(count = n()) %>%
mutate(prop = count / sum(.$count)) %>%
arrange(desc(count)) %>%
head(10) %>%
ggplot() +
geom_bar(aes(x = first, y = prop), stat = "identity")
# 請務必印出圖片
df
df %>%
filter(class == "ABAC") %>%
group_by(first) %>%
summarise(count = n())
