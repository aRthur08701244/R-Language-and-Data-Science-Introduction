knitr::opts_chunk$set(echo = TRUE,comment = '#>',error=TRUE, results = 'hold', out.width='65%', fig.align = 'center', message = FALSE)
# Write your code here
library(tibble)
titanic <- as_tibble(read.csv("titanic-passengers.csv", sep = ";"))
# 請勿更動下方程式碼
head(titanic)
# Should print out:
#> # A tibble: 6 x 12
#>   PassengerId Survived Pclass Name  Sex     Age SibSp Parch Ticket  Fare
#>         <dbl> <chr>     <dbl> <chr> <chr> <dbl> <dbl> <dbl> <chr>  <dbl>
#> 1         343 No            2 Coll… male     28     0     0 248740 13
#> 2          76 No            3 Moen… male     25     0     0 348123  7.65
#> 3         641 No            3 Jens… male     20     0     0 350050  7.85
#> 4         568 No            3 Pals… fema…    29     0     4 349909 21.1
#> 5         672 No            1 Davi… male     31     1     0 F.C. … 52
#> 6         105 No            3 Gust… male     37     2     0 31012…  7.92
#> # … with 2 more variables: Cabin <chr>, Embarked <chr>
# Write your code here
library(dplyr)
titanic%>%
group_by(Sex, Pclass)%>%
summarise(percenr_died = sum(Survived == "Yes")/n())
# Should print out:
#> # A tibble: 6 x 3
#> # Groups:   Sex [2]
#>   Sex    Pclass percent_died
#>   <chr>   <dbl>        <dbl>
#> 1 female      1       0.0319
#> 2 female      2       0.0789
#> 3 female      3       0.5
#> 4 male        1       0.631
#> 5 male        2       0.843
#> 6 male        3       0.865
classify <- function(ages) {
# Initialize empty vector of length same as `ages`
age_group <- vector("character", length = length(ages))return(age_group)
}
classify <- function(ages) {age_group <- vector("character", length = length(ages))return(age_group)}
vector("character", length = length(ages)
)
ages = 17
vector("character", length = length(ages))
classify <- function(ages) {
# Initialize empty vector of length same as `ages`
age_group <- vector("character", length = length(ages))
# Use for loop to write 'vectorized' function
for (i in seq_along(ages)) {
######### Modify the code below #############
if (ages == "NA") {
age_group[i] <- NA
} else if (ages < 15) {
age_group[i] <- "young"
} else if (ages < 60) {
age_group[i] <- "middle"
} else {
age_group[i] <- "old"
}
######### Modify the code above #############
}
return(age_group)
}
# 請勿更動此下方程式碼
classify(NA)
classify <- function(ages) {
# Initialize empty vector of length same as `ages`
age_group <- vector("character", length = length(ages))
# Use for loop to write 'vectorized' function
for (i in seq_along(ages)) {
######### Modify the code below #############
if (ages == "NA") {
age_group[i] <- "NA"
} else if (ages < 15) {
age_group[i] <- "young"
} else if (ages < 60) {
age_group[i] <- "middle"
} else {
age_group[i] <- "old"
}
######### Modify the code above #############
}
return(age_group)
}
# 請勿更動此下方程式碼
classify(NA)
classify <- function(ages) {
# Initialize empty vector of length same as `ages`
age_group <- vector("character", length = length(ages))
# Use for loop to write 'vectorized' function
for (i in seq_along(ages)) {
######### Modify the code below #############
if (ages = "NA") {
classify <- function(ages) {
# Initialize empty vector of length same as `ages`
age_group <- vector("character", length = length(ages))
# Use for loop to write 'vectorized' function
for (i in seq_along(ages)) {
######### Modify the code below #############
if (ages < 15) {
age_group[i] <- "young"
} else if (ages < 60) {
age_group[i] <- "middle"
} else {
age_group[i] <- "old"
}
######### Modify the code above #############
}
return(age_group)
}
# 請勿更動此下方程式碼
classify(NA)
classify <- function(ages) {
# Initialize empty vector of length same as `ages`
age_group <- vector("character", length = length(ages))
# Use for loop to write 'vectorized' function
for (i in seq_along(ages)) {
######### Modify the code below #############
if (is.null(ages)) {
age_group[i] <- NA
} else if (ages < 15) {
age_group[i] <- "young"
} else if (ages < 60) {
age_group[i] <- "middle"
} else {
age_group[i] <- "old"
}
######### Modify the code above #############
}
return(age_group)
}
# 請勿更動此下方程式碼
classify(NA)
classify <- function(ages) {
# Initialize empty vector of length same as `ages`
age_group <- vector("character", length = length(ages))
# Use for loop to write 'vectorized' function
for (i in seq_along(ages)) {
######### Modify the code below #############
if ( ages[i] == "NA") {
age_group[i] <- NA
} else if (ages[i] < 15) {
age_group[i] <- "young"
} else if (ages[i] < 60) {
age_group[i] <- "middle"
} else {
age_group[i] <- "old"
}
######### Modify the code above #############
}
return(age_group)
}
# 請勿更動此下方程式碼
classify(NA)
classify <- function(ages) {
# Initialize empty vector of length same as `ages`
age_group <- vector("character", length = length(ages))
# Use for loop to write 'vectorized' function
for (i in seq_along(ages)) {
######### Modify the code below #############
if ( is.null(i)) {
age_group[i] <- NA
} else if (ages[i] < 15) {
age_group[i] <- "young"
} else if (ages[i] < 60) {
age_group[i] <- "middle"
} else {
age_group[i] <- "old"
}
######### Modify the code above #############
}
return(age_group)
}
# 請勿更動此下方程式碼
classify(NA)
classify <- function(ages) {
# Initialize empty vector of length same as `ages`
age_group <- vector("character", length = length(ages))
# Use for loop to write 'vectorized' function
for (i in seq_along(ages)) {
######### Modify the code below #############
if ( is.null(i)) {
age_group[i] <- NA
} else if (ages[i] < 15) {
age_group[i] <- "young"
} else if (ages[i] < 60) {
age_group[i] <- "middle"
} else {
age_group[i] <- "old"
}
######### Modify the code above #############
}
return(age_group)
}
# 請勿更動此下方程式碼
classify(NA)
classify <- function(ages) {
# Initialize empty vector of length same as `ages`
age_group <- vector("character", length = length(ages))
# Use for loop to write 'vectorized' function
for (i in seq_along(ages)) {
######### Modify the code below #############
print(i)
######### Modify the code above #############
}
return(age_group)
}
# 請勿更動此下方程式碼
classify(NA)
classify(c(14, 15, 16, NA, 59, 60))
# Should print out:
#> [1] NA
#> [1] "young"  "middle" "middle" NA       "middle" "old"
classify <- function(ages) {
# Initialize empty vector of length same as `ages`
age_group <- vector("character", length = length(ages))
# Use for loop to write 'vectorized' function
for (i in seq_along(ages)) {
######### Modify the code below #############
print(ages[i])
######### Modify the code above #############
}
return(age_group)
}
# 請勿更動此下方程式碼
classify(NA)
classify(c(14, 15, 16, NA, 59, 60))
# Should print out:
#> [1] NA
#> [1] "young"  "middle" "middle" NA       "middle" "old"
classify <- function(ages) {
# Initialize empty vector of length same as `ages`
age_group <- vector("character", length = length(ages))
# Use for loop to write 'vectorized' function
for (i in seq_along(ages)) {
######### Modify the code below #############
class(ages[i])
######### Modify the code above #############
}
return(age_group)
}
# 請勿更動此下方程式碼
classify(NA)
classify(c(14, 15, 16, NA, 59, 60))
# Should print out:
#> [1] NA
#> [1] "young"  "middle" "middle" NA       "middle" "old"
classify <- function(ages) {
# Initialize empty vector of length same as `ages`
age_group <- vector("character", length = length(ages))
# Use for loop to write 'vectorized' function
for (i in seq_along(ages)) {
######### Modify the code below #############
if ( is.na(NA)) {
age_group[i] <- "NA"
} else if (ages[i] < 15) {
age_group[i] <- "young"
} else if (ages[i] < 60) {
age_group[i] <- "middle"
} else {
age_group[i] <- "old"
}
######### Modify the code above #############
}
return(age_group)
}
# 請勿更動此下方程式碼
classify(NA)
classify(c(14, 15, 16, NA, 59, 60))
# Should print out:
#> [1] NA
#> [1] "young"  "middle" "middle" NA       "middle" "old"
classify <- function(ages) {
# Initialize empty vector of length same as `ages`
age_group <- vector("character", length = length(ages))
# Use for loop to write 'vectorized' function
for (i in seq_along(ages)) {
######### Modify the code below #############
if ( ages[i] = is.na(NA)) {
classify <- function(ages) {
# Initialize empty vector of length same as `ages`
age_group <- vector("character", length = length(ages))
# Use for loop to write 'vectorized' function
for (i in seq_along(ages)) {
######### Modify the code below #############
if ( ages[i] == is.na(NA)) {
age_group[i] <- "NA"
} else if (ages[i] < 15) {
age_group[i] <- "young"
} else if (ages[i] < 60) {
age_group[i] <- "middle"
} else {
age_group[i] <- "old"
}
######### Modify the code above #############
}
return(age_group)
}
# 請勿更動此下方程式碼
classify(NA)
classify <- function(ages) {
# Initialize empty vector of length same as `ages`
age_group <- vector("character", length = length(ages))
# Use for loop to write 'vectorized' function
for (i in seq_along(ages)) {
######### Modify the code below #############
if ( is.na(NA)) {
age_group[i] <- "NA"
} else if (ages[i] < 15) {
age_group[i] <- "young"
} else if (ages[i] < 60) {
age_group[i] <- "middle"
} else {
age_group[i] <- "old"
}
######### Modify the code above #############
}
return(age_group)
}
# 請勿更動此下方程式碼
classify(NA)
classify(c(14, 15, 16, , 59, 60))
classify <- function(ages) {
# Initialize empty vector of length same as `ages`
age_group <- vector("character", length = length(ages))
# Use for loop to write 'vectorized' function
for (i in seq_along(ages)) {
######### Modify the code below #############
if ( is.na(NA)) {
age_group[i] <- "NA"
} else if (ages[i] < 15) {
age_group[i] <- "young"
} else if (ages[i] < 60) {
age_group[i] <- "middle"
} else {
age_group[i] <- "old"
}
######### Modify the code above #############
}
return(age_group)
}
# 請勿更動此下方程式碼
classify(NA)
classify(c(14, 15, 16,  59, 60))
# Should print out:
#> [1] NA
#> [1] "young"  "middle" "middle" NA       "middle" "old"
classify <- function(ages) {
# Initialize empty vector of length same as `ages`
age_group <- vector("character", length = length(ages))
# Use for loop to write 'vectorized' function
for (i in seq_along(ages)) {
######### Modify the code below #############
if (ages[i] < 15) {
age_group[i] <- "young"
} else if (ages[i] < 60) {
age_group[i] <- "middle"
} else {
age_group[i] <- "old"
}
######### Modify the code above #############
}
return(age_group)
}
# 請勿更動此下方程式碼
classify(NA)
classify <- function(ages) {
# Initialize empty vector of length same as `ages`
age_group <- vector("character", length = length(ages))
# Use for loop to write 'vectorized' function
for (i in seq_along(ages)) {
######### Modify the code below #############
if (ages[i] < 15) {
age_group[i] <- "young"
} else if (ages[i] < 60) {
age_group[i] <- "middle"
} else {
age_group[i] <- "old"
}
######### Modify the code above #############
}
return(age_group)
}
# 請勿更動此下方程式碼
classify(c(14, 15, 16,  59, 60))
# Should print out:
#> [1] NA
#> [1] "young"  "middle" "middle" NA       "middle" "old"
knitr::opts_chunk$set(echo = TRUE, results = 'hold', comment = '#>', error = TRUE)
# 請在下方寫下你的程式碼
#rolled<-sample(c(1:6),10,replace=TRUE)
dice <- 1:6
rolled <- sample(dice, size = 10, replace = TRUE)
# 請勿更動下方程式碼
rolled
# should print out something like:
#> [1] 6 2 1 5 4 5 3 3 2 1
# Since it's random, the results should be different each time,
# but there will always be ten numbers
# 請修改下方程式碼，使 `img_paths` 印出的結果符合題目要求
img_paths <- c("dice/1.png","dice/2.png","dice/3.png","dice/4.png",
"dice/5.png","dice/6.png")
rolled<-sample(c(1:6),10,replace=TRUE)
rolled[rolled == 1]<-("dice/1.png")
rolled[rolled == 2]<-("dice/2.png")
rolled[rolled == 3]<-("dice/3.png")
rolled[rolled == 4]<-("dice/4.png")
rolled[rolled == 5]<-("dice/5.png")
rolled[rolled == 6]<-("dice/6.png")
img_paths<-paste0(rolled)
# 請勿更動下方程式碼
img_paths
# should print out something like:
#>  [1] "dice/2.png" "dice/5.png" "dice/4.png" "dice/2.png" "dice/4.png"
#>  [6] "dice/6.png" "dice/3.png" "dice/2.png" "dice/1.png" "dice/5.png"
# Since it's random, the results should be different each time,
# but there will always be ten elements.
# Also note that the elements should match the numbers stored in `rolled`
# 請修改下方程式碼，使 `img_paths` 印出的結果符合題目要求
rolled<-sample(c(1:6),10,replace=TRUE)
rolled[rolled == 1]<-("dice/1.png")
rolled[rolled == 2]<-("dice/2.png")
rolled[rolled == 3]<-("dice/3.png")
rolled[rolled == 4]<-("dice/4.png")
rolled[rolled == 5]<-("dice/5.png")
rolled[rolled == 6]<-("dice/6.png")
img_paths<-paste0(rolled)
# 請勿更動下方程式碼
img_paths
# should print out something like:
#>  [1] "dice/2.png" "dice/5.png" "dice/4.png" "dice/2.png" "dice/4.png"
#>  [6] "dice/6.png" "dice/3.png" "dice/2.png" "dice/1.png" "dice/5.png"
# Since it's random, the results should be different each time,
# but there will always be ten elements.
# Also note that the elements should match the numbers stored in `rolled`
# 請修改下方程式碼，使 `img_paths` 印出的結果符合題目要求
rolled<-sample(c(1:6),10,replace=TRUE)
rolled[rolled == 1]<-("dice/1.png")
rolled[rolled == 2]<-("dice/2.png")
rolled[rolled == 3]<-("dice/3.png")
rolled[rolled == 4]<-("dice/4.png")
rolled[rolled == 5]<-("dice/5.png")
rolled[rolled == 6]<-("dice/6.png")
img_paths<-paste0(rolled)
# 請勿更動下方程式碼
img_paths
# should print out something like:
#>  [1] "dice/2.png" "dice/5.png" "dice/4.png" "dice/2.png" "dice/4.png"
#>  [6] "dice/6.png" "dice/3.png" "dice/2.png" "dice/1.png" "dice/5.png"
# Since it's random, the results should be different each time,
# but there will always be ten elements.
# Also note that the elements should match the numbers stored in `rolled`
rolled
# 請修改下方程式碼，使 `img_paths` 印出的結果符合題目要求
#rolled<-sample(c(1:6),10,replace=TRUE)
#rolled[rolled == 1]<-("dice/1.png")
#rolled[rolled == 2]<-("dice/2.png")
#rolled[rolled == 3]<-("dice/3.png")
#rolled[rolled == 4]<-("dice/4.png")
#rolled[rolled == 5]<-("dice/5.png")
#rolled[rolled == 6]<-("dice/6.png")
#img_paths<-paste0(rolled)
img_paths <- paste0('dice/', rolled, '.png')
# 請勿更動下方程式碼
img_paths
# should print out something like:
#>  [1] "dice/2.png" "dice/5.png" "dice/4.png" "dice/2.png" "dice/4.png"
#>  [6] "dice/6.png" "dice/3.png" "dice/2.png" "dice/1.png" "dice/5.png"
# Since it's random, the results should be different each time,
# but there will always be ten elements.
# Also note that the elements should match the numbers stored in `rolled`
rep(c("a", "b"), times = 2)
rep(c("a", "b"), times = 1:2)
rep(c("a", "b"), times = c(2, 2))
